// Generated by CoffeeScript 1.6.3
(function() {
  var Client, compose_prefix_string, does_query_have_prefixes, ensure_prefixes, generate_mset_sparql, generate_set_sparql, get_one_key, normalize_v, querystring, request,
    __hasProp = {}.hasOwnProperty;

  request = require('request');

  querystring = require('querystring');

  normalize_v = function(v) {
    if (v == null) {
      return null;
    }
    if (v instanceof Array) {
      if (v.length === 0) {
        return null;
      } else {
        return v;
      }
    } else {
      return [v];
    }
  };

  get_one_key = function(obj) {
    var k;
    for (k in obj) {
      if (!__hasProp.call(obj, k)) continue;
      return k;
    }
  };

  compose_prefix_string = function(prefix_map) {
    var k, v;
    return ((function() {
      var _results;
      _results = [];
      for (k in prefix_map) {
        v = prefix_map[k];
        _results.push("prefix " + k + ": <" + v + ">");
      }
      return _results;
    })()).join(' ');
  };

  does_query_have_prefixes = function(query) {
    var iof;
    iof = query.toLowerCase().indexOf('prefix');
    return (0 < iof && iof < 10);
  };

  ensure_prefixes = function(query, prefix_map) {
    var s;
    s = compose_prefix_string(prefix_map);
    if (s.length === 0 || does_query_have_prefixes(query)) {
      return query;
    } else {
      return s + ' ' + query;
    }
  };

  generate_set_sparql = function(g, s, p, o, inverted, cb) {
    var a, del, e, ins, q, v, val, _ref;
    _ref = inverted ? [o, p, s] : [s, p, o], e = _ref[0], a = _ref[1], v = _ref[2];
    v = normalize_v(v);
    del = (inverted ? ['?x', a, e] : [e, a, '?x']).join(' ');
    if (v != null) {
      ins = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          val = v[_i];
          _results.push((inverted ? [val, a, e] : [e, a, val]).join(' '));
        }
        return _results;
      })()).join(' . ');
      return q = "modify " + g + " delete { " + del + " } insert { " + ins + " } where { optional{ " + del + " } }";
    } else {
      return q = "delete from " + g + " { " + del + " } where { " + del + " } ";
    }
  };

  generate_mset_sparql = function(g, s, atts, cb) {
    var counter, k, q, qAtt, qSjt, v, x;
    qSjt = "insert into " + g + " { " + s + " ";
    counter = 1;
    qAtt = (function() {
      var _results;
      _results = [];
      for (k in atts) {
        v = atts[k];
        if (counter < Object.keys(atts).length) {
          x = ";";
        } else {
          x = "";
        }
        counter = counter + 1;
        _results.push(k + " '" + v + "' " + x);
      }
      return _results;
    })();
    return q = qSjt + qAtt.join(" ") + ". }";
  };

  exports.ensure_prefixes = ensure_prefixes;

  exports.does_query_have_prefixes = does_query_have_prefixes;

  exports.compose_prefix_string = compose_prefix_string;

  exports.generate_set_

    = generate_set_sparql;

  exports.generate_mset_sparql = generate_mset_sparql;

  Client = (function() {
    function Client(url) {
      this.url = url;
      this.prefix_map = {};
    }

    Client.prototype.query = function(query, vars, cb) {
      var auth, opts, password, username;
      query = ensure_prefixes(query, this.prefix_map);
      if (this.log_query === true) {
        if (typeof console !== "undefined" && console !== null) {
          console.log(query);
        }
      }
      username = 'SPARQLMASTER';
      password = 'm1ndbabble';
      auth = 'Basic ' + new Buffer(username + ':' + password).toString('base64');
      opts = {
        uri: this.url,
        headers: {
          'content-type': 'application/x-www-form-urlencoded',
          'accept': 'application/sparql-results+json'
        },
        body: querystring.stringify({
          query: query
        }),
        encoding: 'utf8'
      };
      return request.post(opts, function(err, res, body) {
        console.log("Statuscode:" + (res != null ? res.statusCode : void 0));
        if ((res != null ? res.statusCode : void 0) === 200) {
          return typeof cb === "function" ? cb(null, JSON.parse(body)) : void 0;
        } else {
          return typeof cb === "function" ? cb([err, res, body]) : void 0;
        }
      });
    };

    Client.prototype.rows = function(query, vars, cb) {
      return this.query(query, vars, function(err, res, body) {
        if (err != null) {
          cb(err);
          return;
        }
        if (res != null) {
          return cb(null, res.results.bindings);
        } else {
          return cb(null, null);
        }
      });
    };

    Client.prototype.cols = function(query, cb) {
      return this.query(query, function(err, res) {
        var name, r, row, _i, _len, _ref;
        if (err != null) {
          cb(err);
          return;
        }
        if (res != null) {
          r = {};
          _ref = res.head.vars;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            r[name] = (function() {
              var _j, _len1, _ref1, _results;
              _ref1 = res.results.bindings;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                row = _ref1[_j];
                _results.push(row[name]);
              }
              return _results;
            })();
          }
          return cb(null, r);
        } else {
          return cb(null, null);
        }
      });
    };

    Client.prototype.cell = function(query, cb) {
      return this.row(query, function(err, res) {
        if (err != null) {
          cb(err);
          return;
        }
        if (res != null) {
          return cb(null, res[get_one_key(res)]);
        } else {
          return cb(null, null);
        }
      });
    };

    Client.prototype.row = function(query, cb) {
      return this.query(query, function(err, res) {
        var b;
        if (err != null) {
          cb(err);
          return;
        }
        b = res.results.bindings;
        if (b.length === 0) {
          return cb(null, null);
        } else {
          return cb(null, b[0]);
        }
      });
    };

    Client.prototype.col = function(query, cb) {
      return this.query(query, function(err, res) {
        var b, bs, key;
        if (err != null) {
          cb(err);
          return;
        }
        bs = res.results.bindings;
        if (bs.length === 0) {
          return cb(null, []);
        } else {
          key = get_one_key(bs[0]);
          return cb(null, (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = bs.length; _i < _len; _i++) {
              b = bs[_i];
              _results.push(b[key]);
            }
            return _results;
          })());
        }
      });
    };

    Client.prototype.set = function(g, s, p, o, inverted, cb) {
      var q;
      q = generate_set_sparql(g, s, p, o, inverted);
      return this.query(q, function(err, res) {
        return typeof cb === "function" ? cb(err, res) : void 0;
      });
    };

    Client.prototype.mset = function(g, s, atts, cb) {
      var q;
      q = generate_mset_sparql(g, s, atts);
      return this.query(q, function(err, res) {
        return typeof cb === "function" ? cb(err, res) : void 0;
      });
    };

    return Client;

  })();

  exports.Client = Client;

}).call(this);

/*
 //@ sourceMappingURL=sparql.map
 */